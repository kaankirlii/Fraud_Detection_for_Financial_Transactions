# -*- coding: utf-8 -*-
"""2_fraud_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N0bkDn0cqGr5d5tPjuFgAY87fUAzocp7

This project shows Fraud detection in financial transactions by using Explanatory Data Analysis and Machine learning algorithms.
"""

# Import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('financial_transactions.csv')

# URL of the CSV file (Empty)
#url = ""

# Read the CSV file from the URL into a DataFrame
#try:
# Load the dataset
#    df = pd.read_csv(url)
#    print("Data loaded successfully.")
    # Display the first few rows of the DataFrame
#    print(df.head())
#except Exception as e:
#    print("Error loading data:", e)

# Exploratory Data Analysis (EDA)
# Summary statistics
print("Summary Statistics:")
print(df.describe())

# Distribution of transaction types
plt.figure(figsize=(8, 6))
sns.countplot(x='transaction_type', data=df)
plt.title("Distribution of Transaction Types")
plt.show()

# Distribution of transaction amounts
plt.figure(figsize=(8, 6))
sns.histplot(df['amount'], bins=30, kde=True)
plt.title("Distribution of Transaction Amounts")
plt.xlabel("Amount")
plt.ylabel("Frequency")
plt.show()

# Distribution of ending balances
plt.figure(figsize=(8, 6))
sns.histplot(df['ending_balance'], bins=30, kde=True)
plt.title("Distribution of Ending Balances")
plt.xlabel("Ending Balance")
plt.ylabel("Frequency")
plt.show()

# Distribution of fraudulent transactions
plt.figure(figsize=(6, 4))
sns.countplot(x='is_fraudulent', data=df)
plt.title("Distribution of Fraudulent Transactions")
plt.show()

# Supervised Learning (Machine Learning) - Logistic Regression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Features and target variable
X = df[['amount', 'starting_balance', 'ending_balance']]
y = df['is_fraudulent']

# Splitting the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Model evaluation
print("\nModel Evaluation:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))