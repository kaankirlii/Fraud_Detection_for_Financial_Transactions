# -*- coding: utf-8 -*-
"""1_create_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rp4H3J8j7cSKiNlerblzP143PmMaoDLm
"""

import pandas as pd
import numpy as np

# Set random seed for reproducibility
np.random.seed(42)

# Number of transactions to generate
num_transactions = 10000

# Generate transaction types
transaction_types = np.random.choice(['CASH_IN', 'CASH_OUT', 'DEBIT', 'PAYMENT'], size=num_transactions)

# Generate transaction amounts
transaction_amounts = np.random.normal(loc=5000, scale=2000, size=num_transactions)
transaction_amounts = np.clip(transaction_amounts, 0, None)  # Ensure non-negative amounts

# Generate account balances before transaction
starting_balances = np.random.normal(loc=50000, scale=20000, size=num_transactions)
starting_balances = np.clip(starting_balances, 0, None)  # Ensure non-negative balances

# Calculate ending balances after transaction
ending_balances = starting_balances.copy()
for i, transaction_type in enumerate(transaction_types):
    if transaction_type in ['CASH_OUT', 'DEBIT']:
        ending_balances[i] -= transaction_amounts[i]
    elif transaction_type in ['CASH_IN', 'PAYMENT']:
        ending_balances[i] += transaction_amounts[i]

# Generate destination account information for cash-out transactions
destination_accounts = np.where(transaction_types == 'CASH_OUT', np.random.randint(1000000, 9999999, size=num_transactions), None)

# Generate fraudulent transaction indicator
is_fraudulent = np.random.choice([0, 1], size=num_transactions, p=[0.95, 0.05])  # 5% fraud rate

# Create DataFrame
data = {
    'transaction_type': transaction_types,
    'amount': transaction_amounts,
    'starting_balance': starting_balances,
    'ending_balance': ending_balances,
    'destination_account': destination_accounts,
    'is_fraudulent': is_fraudulent
}

df = pd.DataFrame(data)

# Display first few rows of the dataset
print(df.head())

# Display last few rows of the dataset
print(df.tail())

# Save the dataset to a CSV file
df.to_csv('financial_transactions.csv', index=False)